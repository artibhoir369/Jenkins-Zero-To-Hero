pipeline {
  agent {
    docker {
      image 'artibhoir369/maven-docker-agent:v1'  // Custom Maven Docker image with Java 17 and SonarQube Scanner
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'  // Mount Docker socket for Docker commands
    }
  }
  environment {
    SONARQUBE_URL = 'http://10.224.143.136:9000'  // SonarQube container URL (assuming SonarQube is running on the same Docker network)
    SONARQUBE_TOKEN = credentials('sonarqube')  // Store token securely in Jenkins credentials
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        // Uncomment if needed
        // git branch: 'main', url: 'https://github.com/artibhoir369/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // Build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONARQUBE_TOKEN -Dsonar.host.url=${SONARQUBE_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "artibhoir369/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "artibhoir369"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    pwd
                    ls -la
                    git config --global --add safe.directory /var/jenkins_home/workspace/new  # Mark as a safe directory
                    git config --global user.email "arti.xyz@gmail.com"
                    git config user.name "Arti Bhoir"

                    # Checkout main branch and pull latest changes
                    git checkout main
                    git pull origin main --no-rebase

                    # Add target/ to .gitignore (if not already added)
                    echo 'java-maven-sonar-argocd-helm-k8s/spring-boot-app/target/' >> .gitignore
                    git add .gitignore
                    git commit -m "Update .gitignore to exclude target directory"

                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    cat java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git status
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
